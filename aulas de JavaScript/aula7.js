//----------------------------------------------------------------Arrays--------------------------------------------------------------------//

/*
O que vamos aprender?
Pode parecer um sonho, mas √© poss√≠vel termos vari√°veis que guardam mais de um valor utilizando listas! Como? Em JavaScript essas listas s√£o conhecidas como arrays, ent√£o nada de dormir no ponto! Veja o que voc√™ vai aprender:

Descobrir o comprimento (quantidade total de elementos) de um array;
Descobrir a posi√ß√£o ou √≠ndice (n√∫mero-chave) de um item no array;
Acessar um ou mais itens no array atrav√©s do √≠ndice;
Adicionar ou modificar um item ao acess√°-lo pelo √≠ndice.
*/

/*
Arrays
Arrays s√£o listas que permitem armazenar mais de um valor por vez, ou seja, funciona como um tipo de vari√°vel composta. Uma vari√°vel composta pode armazenar in√∫meros valores, diferente da vari√°vel simples, em que √© poss√≠vel guardar apenas um √∫nico valor. Sabendo disso, agora voc√™ pode guardar todos os nomes das pessoas estudantes de uma turma dentro de uma s√≥ vari√°vel! ü•≥

Voltando ao exemplo dos nomes das pessoas estudantes por turma, veja agora como ficam esses nomes armazenados em arrays:

const alunosTurma1 = ['F√†bio', 'Cristina', 'J√©ssica'];
const alunosTurma2 = ['Jo√£o', 'Diogo'];

console.log(alunosTurma1); // ['F√†bio', 'Cristina', 'J√©ssica']
console.log(alunosTurma2); // ['Jo√£o', 'Diogo']
*/

/*
Adicionando um valor a um array
Voc√™ j√° conhece a magia do arrays, onde voc√™ pode guardar mais de um valor dentro de uma mesma vari√°vel. Agora √© hora de colocar em pr√°tica resolvendo um problema do cotidiano.

Pense no seguinte cen√°rio: voc√™ precisa ir ao mercado e fez uma lista de compras com JavaScript, utilizando um array para armazenar os itens da lista:

const listaDeCompras = ['arroz', 'feij√£o', 'ovo'];

Por√©m, esqueceu de adicionar o item 'farofa' e n√£o pode adicion√°-lo diretamente no seu array. O que fazer agora?

Para isso, voc√™ tem duas op√ß√µes:

Usar o pr√≥ximo √≠ndice dispon√≠vel;
Utilizar a fun√ß√£o .push(), um m√©todo pr√≥prio para adicionar um item no array.
Primeiro, vamos testar usando o pr√≥ximo √≠ndice dispon√≠vel:

O formato √© o seguinte: meuArray[proximoIndiceDisponivel] = valor. Ou seja, voc√™ utiliza a posi√ß√£o que est√° dispon√≠vel no array e atribui um valor a ela.

Como sua lista tem tr√™s itens, e sabendo que o index come√ßa no 0, o √∫ltimo index √© o 2 ('ovo'). Dessa maneira, o pr√≥ximo index dispon√≠vel √© o 3:

Por√©m, esqueceu de adicionar o item 'farofa' e n√£o pode adicion√°-lo diretamente no seu array. O que fazer agora?

Para isso, voc√™ tem duas op√ß√µes:

Usar o pr√≥ximo √≠ndice dispon√≠vel;
Utilizar a fun√ß√£o .push(), um m√©todo pr√≥prio para adicionar um item no array.
Primeiro, vamos testar usando o pr√≥ximo √≠ndice dispon√≠vel:

O formato √© o seguinte: meuArray[proximoIndiceDisponivel] = valor. Ou seja, voc√™ utiliza a posi√ß√£o que est√° dispon√≠vel no array e atribui um valor a ela.

Como sua lista tem tr√™s itens, e sabendo que o index come√ßa no 0, o √∫ltimo index √© o 2 ('ovo'). Dessa maneira, o pr√≥ximo index dispon√≠vel √© o 3:

Nossa lista √© pequena e conseguimos contar cada item, mas e se a lista fosse maior? Ficaria dif√≠cil saber qual √© o √∫ltimo item do array. Para isso, podemos utilizar o .push(), que vai adicionar um valor ao final do array. Seu formato √©: meuArray.push(valor);.

Veja como fica o exemplo da lista de compras:

const listaCompras = ['arroz', 'feij√£o', 'ovo'];

console.log(listaCompras.push('farofa')); // ['arroz', 'feij√£o', 'ovo', 'farofa']

Pronto! Lista atualizada com sucesso!

Ao utilizar o .push(), n√£o √© necess√°rio saber o √∫ltimo √≠ndice do array para adicionar um item. Legal, n√©?

Vamos a mais um exemplo:

Ao voltar do mercado, voc√™ fez sua refei√ß√£o e come√ßou a lembrar de todos os anos em que o Brasil foi campe√£o da Copa do Mundo at√© o ano de 2002 e, para n√£o esquecer, decidiu criar uma lista:

const titulosCopaDoMundo = [1958, 1962, 1970, 1994];

console.log(titulosCopaDoMundo); // [1958, 1962, 1970, 1994]

Ops! Faltou o t√≠tulo de 2002!

Para adicionar esse t√≠tulo utilizando o pr√≥ximo √≠ndice dispon√≠vel, √© necess√°rio saber qual o √≠ndice do √∫ltimo item da lista atual que, nesse caso, √© 3 (ano de 1994). Ent√£o, o pr√≥ximo √≠ndice dispon√≠vel ser√° o 4 (ano de 2002), pois ser√° o pr√≥ximo a ser incluso na lista e ainda n√£o h√° nenhum item atribu√≠do a ele.
*/

const titulosCopaDoMundo = [1958, 1962, 1970, 1994];

titulosCopaDoMundo[4]=2002;
console.log(titulosCopaDoMundo);

/*
Voc√™ deve estar se perguntando: ‚ÄúMas e o .push()?‚Äù

Vamos fazer a inser√ß√£o pelo m√©todo push utilizando o mesmo exemplo da Copa, observe:

const titulosCopaDoMundo = [1958, 1962, 1970, 1994];
titulosCopaDoMundo.push(2002);

console.log(titulosCopaDoMundo); // [1958, 1962, 1970, 1994, 2002]

Voc√™ percebeu que, utilizando os dois m√©todos diferentes, fizemos a mesma coisa?

Anota a√≠ üì£ : A vantagem do .push() √© que voc√™ n√£o precisa saber o pr√≥ximo √≠ndice dispon√≠vel para adicionar um valor a um array, pois essa fun√ß√£o j√° adiciona ao final da lista o valor passado entre os par√™nteses.

Agora que voc√™ j√° sabe como adicionar itens a uma lista, que tal realizar um teste no seu computador utilizando os dois m√©todos que voc√™ viu!?

Substituindo um item em um array
Imagine que voc√™ precisa fazer um programa que analise o clima da regi√£o Norte e, para realizar essa tarefa, criou uma lista para armazenar os estados da regi√£o, mas, ao inv√©s de adicionar o ‚ÄòPar√°‚Äô, voc√™ sem querer adicionou o ‚ÄòParan√°‚Äô, que √© da regi√£o Sul:

const estadosNorte = ['Acre', 'Amap√°', 'Amazonas', 'Paran√°', 'Rond√¥nia', 'Roraima', 'Tocantins'];

O que voc√™ faz? Vai ter que criar uma outra vari√°vel e escrever a lista toda do zero? Calma l√°, n√£o precisa desse trabalh√£o todo n√£o.

Primeiro, voc√™ precisa descobrir o √≠ndice do item que voc√™ quer substituir:

const estadosNorte = ['Acre', 'Amap√°', 'Amazonas', 'Paran√°', 'Rond√¥nia', 'Roraima', 'Tocantins'];

console.log(estadosNorte[3]); // Paran√°

Segundo, com o √≠ndice em m√£os, basta atribuir o novo valor nele, no formato meuArray[meuIndiceJaOcupado] = valor.

const estadosNorte = ['Acre', 'Amap√°', 'Amazonas', 'Paran√°', 'Rond√¥nia', 'Roraima', 'Tocantins'];
estadosNorte[3] = 'Par√°';

console.log(estadosNorte); // 'Acre', 'Amap√°', 'Amazonas', 'Par√°', 'Rond√¥nia', 'Roraima', 'Tocantins'

Pronto! Agora sua lista de estados da regi√£o Norte est√° correta! üéâ

Vamos ver mais um exemplo?

Voc√™ foi fazer o almo√ßo e percebeu que estava sem alguns ingredientes, ent√£o decidiu escrever uma lista do que precisa comprar no mercado:

const ingredientes = ['arroz', 'batata', 'cenoura', 'sal', 'pimenta do reino'];

console.log(ingredientes); // ['arroz', 'batata', 'cenoura', 'sal', 'pimenta do reino']

Voc√™ abriu a geladeira e viu que a cenoura estava escondida atr√°s da garrafa de √°gua, o que te fez lembrar que deveria comprar um suco, e agora?

*/
const ingredientes = ['arroz', 'batata', 'cenoura', 'sal', 'pimenta do reino'];

console.log(ingredientes); // ['arroz', 'batata', 'cenoura', 'sal', 'pimenta do reino']

ingredientes[2] = 'suco';

console.log(ingredientes);

/*
De olho na dica üëÄ : Para facilitar a manipula√ß√£o de listas, sem precisar escrev√™-las do zero quando quiser substituir um valor, utilize o √≠ndice do item que voc√™ quer substituir.

Viu s√≥? Deu tudo certo! Agora voc√™ vai poder comprar todos os ingredientes para fazer sua refei√ß√£o.
*/

/* -------------------------------------------------------------------Recuperando o tamanho de um array
Voc√™ decidiu fazer uma festa, entretanto acabou se perdendo na quantidade de pessoas que est√£o na lista de convidados, afinal sempre tem pessoas confirmando ou cancelando a participa√ß√£o no evento. Voc√™ precisa saber a quantidade de pessoas que far√£o parte da festa para decidir o local adequado. E agora, como solucionar esse problema?

Para descobrir essa informa√ß√£o, basta olhar a quantidade de itens da lista, ou seja, o tamanho dela.
Como? ü§î

Existe uma fun√ß√£o no JavaScript que j√° faz isso para a n√≥s: a .length.

De olho na dica üëÄ : A palavra length, em portugu√™s, significa comprimento, ou seja, essa fun√ß√£o nos retorna o comprimento do nosso array e tamb√©m pode ser utilizada para saber o tamanho de uma string, utilizando o formato string.length.

A √∫nica coisa que voc√™ precisa fazer √© usar o .length no final do array, por exemplo: meuArray.length. S√≥ com esse formato voc√™ j√° consegue pegar o comprimento desse array.

Seguindo o exemplo da lista de convidados, veja o c√≥digo abaixo:
*/

const convidados = ['Sheila', 'Cleyton', 'Leticia', 'Gisele', 'Vinicius', 'Ivan', 'Laura', 'Guilherme', 'Erickson', 'Claudio', 'Adilson', 'Juliana'];
const quantidadeConvidados = convidados.length;

console.log(convidados); 
console.log(quantidadeConvidados); 

//Se adicionarmos um valor a essa lista, ela mudaria de tamanho? Com toda certeza. Veja o c√≥digo a seguir:

const convidados1 = ['Sheila', 'Cleyton', 'Leticia', 'Gisele', 'Vinicius', 'Ivan', 'Laura', 'Guilherme', 'Erickson', 'Claudio', 'Adilson', 'Juliana'];
convidados1.push('Evelyn');

console.log(convidados1); 
console.log(convidados1.length); // 13

/*
Agora temos a Evelyn na nossa lista de convidados e o array possui 13 pessoas no momento.

De olho na dica üëÄ : Com o .length, tamb√©m podemos descobrir qual √© o √∫ltimo valor da lista, sem precisar de √≠ndice!

Temos 13 convidados na nossa lista. Podemos verificar com convidados.length.
Sabemos que o √≠ndice come√ßa do 0, ou seja, se temos 13 itens, significa que o √∫ltimo √≠ndice √© 13 - 1, no caso, 12. Podemos verificar com convidados.length - 1.
Ent√£o, para pegarmos o √∫ltimo valor da lista, ficaria da seguinte forma: meuArray[meuArray.length - 1].

Ou seja, como o √≠ndice do √∫ltimo item sempre √© 1 n√∫mero a menos que o comprimento total dessa lista, a √∫nica coisa que precisamos fazer √© subtrair 1 da quantidade total de itens do array.

Por exemplo:

const convidados = ['Sheila', 'Cleyton', 'Leticia', 'Gisele', 'Vinicius', 'Ivan', 'Laura', 'Guilherme', 'Erickson', 'Claudio', 'Adilson', 'Juliana', 'Evelyn'];
const ultimoConvidado = convidados[convidados.length - 1];

console.log(ultimoConvidado); // Evelyn
    
*/

// ----------------------------------------------------------------Exerc√≠cios-------------------------------------------------------------

/*
Lista de compras üßæ
Imagine que voc√™ est√° saindo para fazer compras no supermercado com a seguinte lista:

Ma√ß√£
Biscoito/Bolacha
Banana
Caf√© em p√≥
Leite
Arroz
Crie uma vari√°vel chamada listaDeCompras e atribua um array com as informa√ß√µes da lista acima.
*/
const listaDeCompras = ['ma√ß√£', 'biscoito/bolacha', 'banana', 'caf√© em p√≥', 'leite', 'arroz'];

console.log(listaDeCompras);
console.log(listaDeCompras.length-1);

/*
Imprimindo na tela itens de um array üíª
Elabore um algoritmo usando o c√≥digo abaixo:

const frutas = ['Abacaxi', 'Uva', 'Banana', 'Pera', 'Ma√ß√£'];

Utilize o console.log() para mostrar as seguintes informa√ß√µes no console:

Mostre o terceiro item do array;
Mostre o primeiro item do array;
Mostre o quinto item do array;
Mostre a concatena√ß√£o do primeiro item com o terceiro item do array. O retorno deve seguir a estrutura 'item1 e item3', onde item1 e item3 s√£o seus respectivos valores.
*/
const frutas = ['Abacaxi', 'Uva', 'Banana', 'Pera', 'Ma√ß√£'];
console.log (frutas[2]); //banana √© o terceiro item da array... pq o 2 ali ent√£o? Simples, o indice do vetor inicia em 0. 0, 1, 2 (banana se enontra no indice 2 do vetor).
console.log (frutas[0]); //abacaxi
console.log (frutas[4]); //ma√ß√£
let vitamina = (frutas[0]) + ' e ' + (frutas[2]);
console.log(vitamina);

