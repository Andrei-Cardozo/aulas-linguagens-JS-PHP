//------------------------------------------------Fun√ß√µes--------------------------------------------------

/*
O que vamos aprender?
Agora voc√™ vai aprender como melhorar o seu c√≥digo fazendo o uso de fun√ß√µes no JavaScript!

Voc√™ ser√° capaz de:
Extrair partes do seu c√≥digo e agrupar em fun√ß√µes;
Executar fun√ß√µes;
Escrever programas JavaScript utilizando fun√ß√µes.
Por que isso √© importante?
As fun√ß√µes s√£o ferramentas essenciais na caixa de ferramentas de uma pessoa programadora! Elas permitem reutilizar trechos de c√≥digo que se repetem em um programa, proporcionando mais agilidade no desenvolvimento do c√≥digo, al√©m de deixar o c√≥digo mais organizado.

O que s√£o fun√ß√µes?
Fun√ß√µes, na programa√ß√£o, s√£o blocos de c√≥digos que executam uma a√ß√£o necess√°ria em v√°rios momentos diferentes, e podem receber e retornar informa√ß√µes.

Por exemplo, para muitas pessoas a tarefa de lavar lou√ßa √© di√°ria. Para realiz√°-la, temos uma sequ√™ncia de passos que inclui: esfregar os pratos, os copos, os talheres, as panelas, etc.

Suponha que voc√™ precisa repetir esse passo a passo todos os dias e, √†s vezes, mais de uma vez por dia. √â cansativo, n√©? Se voc√™ tem uma lavadora de lou√ßas, √© s√≥ colocar tudo dentro dela, esperar o ciclo de lavagem terminar e, no final, ela te entrega todas as lou√ßas limpas! Muito melhor, n√£o √© mesmo?

As fun√ß√µes s√£o como a lavadora de lou√ßas! Em vez de repetir muitas vezes o mesmo c√≥digo, utilizamos as fun√ß√µes sempre que √© necess√°rio executar a mesma tarefa novamente. Essa √© a praticidade que as fun√ß√µes te proporcionam na programa√ß√£o!

Assim, se voc√™ tiver um c√≥digo repetido, pode colocar esse c√≥digo dentro de uma fun√ß√£o e, toda vez que precisar utilizar esse c√≥digo, em vez de digit√°-lo novamente, pode executar a fun√ß√£o.

Anota a√≠ üì£ : As fun√ß√µes podem receber e retornar informa√ß√µes. Elas tamb√©m possibilitam a reutiliza√ß√£o do c√≥digo, mantendo-o limpo e organizado, j√° que podem ser executadas quantas vezes for necess√°rio.

A defini√ß√£o da fun√ß√£o (tamb√©m chamada de declara√ß√£o da fun√ß√£o) consiste no uso da palavra-chave function, seguida pelo nome da fun√ß√£o e par√™nteses (). A a√ß√£o estar√° nos blocos de c√≥digo que definem o corpo da fun√ß√£o, entre chaves {}. Veja como isso ocorre na pr√°tica:

function nomeDaFuncao() {
  // bloco de c√≥digo a ser executado
}

A palavra function, que significa fun√ß√£o em portugu√™s, inicia a declara√ß√£o da fun√ß√£o;
O nome da fun√ß√£o √© o meio de identific√°-la e, ao cham√°-la, o JavaScript entende qual bloco de c√≥digo voc√™ quer executar;
Os par√™nteses servem para que a fun√ß√£o possa receber informa√ß√µes chamadas de par√¢metro e possibilitam que a fun√ß√£o utilize essas informa√ß√µes no bloco de c√≥digo.
Por exemplo, se voc√™ fosse desenvolver uma fun√ß√£o que tivesse o objetivo de cumprimentar a pessoa que est√° executando o programa pelo nome, tal como ‚ÄòOl√°, Gisele!‚Äô, como voc√™ faria?
*/

/*
Para isso, vamos quebrar a fun√ß√£o em partes:

Primeiro passo: iniciar com a palavra function; Segundo passo: dar um nome para a fun√ß√£o, como, por exemplo, imprimeSaudacao; Terceiro passo: abrir e fechar par√™nteses (), que ser√£o vazios no in√≠cio, pois ainda n√£o √© necess√°rio passar nenhuma informa√ß√£o para a fun√ß√£o; Quarto passo: abrir chaves {, definir o bloco de c√≥digo e fechar chaves }.

O objetivo da nossa fun√ß√£o √© cumprimentar uma pessoa. Para isso, podemos escrever uma sauda√ß√£o como 'Ol√°, Gisele!':

*/

function cumprimentar() {
   return 'Ol√° Andrei';
}

cumprimentar();

/*
Tente executar esse c√≥digo no console de seu navegador.

Nada acontece, n√£o √© mesmo?

Isso ocorre porque a fun√ß√£o n√£o foi invocada. A invoca√ß√£o nada mais √© do que executar a fun√ß√£o, ou seja, cham√°-la. Primeiro, o JavaScript vai ler a declara√ß√£o da fun√ß√£o, e s√≥ quando invocarmos a fun√ß√£o √© que o bloco de c√≥digo ser√° executado.

Para invocar a fun√ß√£o √© necess√°rio colocar o nome dela seguido de par√™nteses: imprimeSaudacao();.
A sauda√ß√£o n√£o foi retornada e o resultado foi undefined. Por que voc√™ acha que isso aconteceu?

Quando uma fun√ß√£o √© chamada, ela executa o bloco de c√≥digo de dentro dela e nos retorna uma informa√ß√£o, mas, para isso, √© preciso informar para a fun√ß√£o qual o retorno esperado utilizando a palavra return. 
Agora sim, a mensagem foi exibida! Isso porque o return √© respons√°vel por devolver a informa√ß√£o definida, ou seja, 'Ol√°, Gisele!'.

‚ö† Aten√ß√£o: O return interrompe a execu√ß√£o da fun√ß√£o, isto √©, ao utilizar o return, qualquer c√≥digo abaixo dele dentro do mesmo bloco de c√≥digo n√£o vai ser executado. Observe:


function imprimeSaudacao() {
    const saudacao = 'Ol√°, Gisele!';
  
    console.log('Eu sou um console e vou aparecer!');
    return saudacao;
  
    console.log('Eu sou um console e n√£o vou aparecer üò≠!');
  }
  
  imprimeSaudacao();

  //Anota a√≠ üì£ : A palavra return indica qual √© o retorno esperado e finaliza a execu√ß√£o da fun√ß√£o.

  Voc√™ pode continuar utilizando o console.log na chamada da fun√ß√£o para testar o retorno:
  */

  function imprimeSaudacao() {
    const saudacao = 'Ol√°, Gisele!';
    return saudacao;
  }
  
  console.log(imprimeSaudacao());

  //Para deixar o c√≥digo ainda mais organizado, voc√™ pode salvar a frase 'Ol√°, Gisele!' em uma vari√°vel e utilizar o return que o resultado ser√° o mesmo.

//Pronto! Agora voc√™ j√° sabe como declarar uma fun√ß√£o, como execut√°-la e tamb√©m como fazer com que ela retorne uma informa√ß√£o. Chegou a hora de aprender a enviar informa√ß√µes para a fun√ß√£o por meio de par√¢metros!

//--------------------------------------------------Par√¢metros---------------------------------------
/*Par√¢metros s√£o informa√ß√µes - ou argumentos - passados para as fun√ß√µes com o objetivo deixar seu c√≥digo mais din√¢mico e organizado. √â poss√≠vel criar fun√ß√µes com nenhum ou v√°rios par√¢metros.

Para decidir se √© necess√°rio utilizar par√¢metros, voc√™ vai depender do objetivo da sua fun√ß√£o. Por exemplo, se voc√™ desenvolver uma fun√ß√£o com o objetivo de dar ‚ÄòBom dia!‚Äô, o par√¢metro n√£o √© necess√°rio, porque essa informa√ß√£o n√£o precisa ser alterada. Mas se voc√™ quer cumprimentar a pessoa que est√° executando o programa pelo nome, como a fun√ß√£o imprimeSaudacao que retorna o texto 'Ol√°, Gisele!', √© necess√°rio que o nome recebido seja din√¢mico, ou seja, √© preciso que sua fun√ß√£o receba um par√¢metro que possibilite que o nome seja alterado.

Agora, vamos ver na pr√°tica como utilizar par√¢metros!

Na declara√ß√£o da fun√ß√£o temos a palavra function, seguida do nome da fun√ß√£o e dos par√™nteses. S√£o eles que v√£o receber o par√¢metro. Observe como isso acontece:

function imprimeSaudacao(parametro) {
  return parametro;
}

A fun√ß√£o imprimeSaudacao est√° recebendo e retornando um par√¢metro. Para que a fun√ß√£o consiga retornar uma informa√ß√£o, √© necess√°rio informar qual valor o par√¢metro vai receber. Para isso, √© necess√°rio passar esse valor na chamada da fun√ß√£o. Execute o c√≥digo abaixo no console do seu navegador:
*/

function imprimeSaudacao(parametro) {
    return parametro;
  }
  
  console.log(imprimeSaudacao('Oi! Eu sou um par√¢metro!')); // o valor do par√¢metro √© passado na chamada da fun√ß√£o

  // A fun√ß√£o retornou a string 'Oi! Eu sou um par√¢metro!', ou seja, no momento da declara√ß√£o da fun√ß√£o, o valor do par√¢metro ainda n√£o existe. O valor s√≥ √© definido quando a fun√ß√£o √© chamada. Para imprimir a sauda√ß√£o, √© a mesma estrutura. Veja:

  function imprimeSaudacao(parametro) {
    return parametro;
  }
  
  console.log(imprimeSaudacao('Ol√°, Gisele!'));
  
//No exemplo acima, a fun√ß√£o est√° recebendo toda a frase 'Ol√°, Gisele'. Mas reflita: como voc√™ poderia fazer para que o trecho 'Ol√°, ' permane√ßa dentro da declara√ß√£o da fun√ß√£o, passando apenas o nome da pessoa na chamada da fun√ß√£o, por exemplo, imprimeSaudacao('Gisele')?

// A reposta √©: utilizando par√¢metros! Observe o c√≥digo abaixo para ver como isso ocorrendo na pr√°tica:

function imprimeSaudacao(parametro) {
    return 'Ol√°, ' + parametro + '!';
  }
  
  console.log(imprimeSaudacao('Gisele'));

  //O par√¢metro pode ter qualquer nome, mas √© importante que ele seja descritivo, assim como vari√°veis e fun√ß√µes. Como a fun√ß√£o imprimeSaudacao √© uma fun√ß√£o respons√°vel por cumprimentar algu√©m, voc√™ pode trocar o nome do par√¢metro por nome. Veja:

  function imprimeSaudacao(nome) {
    const saudacao = 'Ol√°, ' + nome + '!';
    return saudacao;
  }
  
  console.log(imprimeSaudacao('Gisele'));

  /*
  Dessa maneira, seu c√≥digo fica mais leg√≠vel e facilita a compreens√£o do que sua fun√ß√£o est√° retornando.

Hora de testar üíª: Troque o nome 'Gisele' pelo seu. N√£o se esque√ßa de colocar entre aspas, indicando que o valor √© uma string.

Agora, imagine que voc√™ precisa que a fun√ß√£o imprimeSaudacao cumprimente a pessoa com nome e sobrenome. Como voc√™ faria?

As fun√ß√µes podem receber mais de um par√¢metro e, para fazer isso, basta separ√°-los por v√≠rgula na declara√ß√£o e na hora de chamar a fun√ß√£o. Veja o exemplo abaixo:

*/

function imprimeSaudacao(nome, sobrenome) {
    const saudacao = 'Ol√°, ' + nome + ' ' + sobrenome + '!';
    return saudacao;
  }
  
  console.log(imprimeSaudacao('Andrei', 'Cardozo'));

  /*
  ‚ö† Aten√ß√£o: A ordem dos par√¢metros importa! Ou seja, se voc√™ declarou o nome como primeiro par√¢metro, ao chamar a fun√ß√£o, o valor a ser passado primeiro √© referente ao nome da pessoa.

At√© agora voc√™ utilizou strings como par√¢metro, mas as fun√ß√µes podem receber outros tipos de dados como par√¢metro. Por exemplo, voc√™ pode salvar o nome e o sobrenome da pessoa em uma vari√°vel e passar para a fun√ß√£o, como no exemplo abaixo:

function imprimeSaudacao(nome, sobrenome) {
    const saudacao = 'Ol√°, ' + nome + ' ' + sobrenome + '!';
    return saudacao;
  }
  
  const nomeDaPessoa = 'Gisele';
  const sobrenomeDaPessoa = 'Santin';
  
  console.log(imprimeSaudacao(nomeDaPessoa, sobrenomeDaPessoa));


  Voc√™ tamb√©m pode passar n√∫meros. Por exemplo, imagine que voc√™ precisa cumprimentar a pessoa e dizer a idade dela. Observe o exemplo:

*/
function imprimeSaudacao(nome, sobrenome, idade) {
    const saudacao = 'Ol√°, ' + nome + ' ' + sobrenome + '!';
    const exibeIdade = 'Voc√™ tem ' + idade + ' anos.';
  
    return saudacao + ' ' + exibeIdade;
  }
  
  const nomeDaPessoa = 'Gisele';
  const sobrenomeDaPessoa = 'Santin';
  
  console.log(imprimeSaudacao(nomeDaPessoa, sobrenomeDaPessoa, 25));

  //Note que voc√™ passou as vari√°veis nomeDaPessoa e sobrenomeDaPessoa, que s√£o do tipo string, e tamb√©m a idade, 25, que √© do tipo number. Isso significa que a fun√ß√£o pode receber dados de v√°rios tipos!

  //Hora de testar üíª: Cumprimente e exiba a idade de mais 3 pessoas:

  function imprimeSaudacao(nome, sobrenome, idade) {
    const saudacao = 'Ol√°, ' + nome + ' ' + sobrenome + '!';
    const exibeIdade = 'Voc√™ tem ' + idade + ' anos.';
  
    return saudacao + ' ' + exibeIdade;
  }
  
  console.log(imprimeSaudacao('Alberto', 'Cavalcanti', 85));
  console.log(imprimeSaudacao('Cleyton', 'Oliveira', 32));
  console.log(imprimeSaudacao('Sandra', 'Cardoso', 58));

  /*
  Utilize o console.log para executar a fun√ß√£o e testar o retorno de cada uma das fun√ß√µes

Viu como par√¢metros deixam as fun√ß√µes mais organizadas e din√¢micas? Voc√™ pode passar vari√°veis, strings, number e outros tipos de dados. Interessante, n√£o √© mesmo?

Agora que voc√™ j√° aprendeu como passar par√¢metros e j√° cumprimentou todas as pessoas que rodaram seu c√≥digo, imagine que voc√™ quer calcular as despesas do m√™s, como luz e internet. Como voc√™ faria?

N√£o se preocupe, a estrutura da fun√ß√£o √© a mesma, o que vai ser modificado √© o nome e os par√¢metros da fun√ß√£o. Observe:
*/

function calculaDespesa(luz, internet) {
    return luz + internet;
}
console.log(calculaDespesa(230, 150));

/*
Voc√™ pode deixar o retorno da fun√ß√£o mais detalhado:

function calculaDespesa(luz, internet) {
  const despesaTotal = luz + internet;

  return 'Esse m√™s, a despesa foi de: R$ ' + despesaTotal;
}

console.log(calculaDespesa(230, 125));

O resultado da conta do m√™s foi de R$ 355 reais. üò±

Agora voc√™ pode utilizar fun√ß√µes para deixar seu c√≥digo mais organizado, reaproveit√°vel, e ainda pode calcular suas despesas! ü§©
*/

//----------------------------------------------------Exerc√≠cios------------------------------------------
/*
Crie uma fun√ß√£o que exiba a frase: Vamo que vamo! üöÄ
Crie uma fun√ß√£o mostrarFrase que retorne a frase ‚ÄòVamo que vamo!‚Äô quando chamada.
*/
function mostrarFrase(frase){
    return frase;
};
console.log(mostrarFrase('Vamo que Vamo'));

//Sauda√ß√£o, terr√°queo üõ∏
//Crie uma fun√ß√£o saudacao que recebe um par√¢metro nome e mostre uma mensagem de sauda√ß√£o, por exemplo: 'Ol√°, Julia!'
function saudacao(nome){
    const mFrase = 'Ol√°, ' + nome + '!';
    return mFrase;
};
console.log(saudacao('Andrei'));

/*
Pedido na pizzaria üçï
Crie uma fun√ß√£o clientePedido que receba um par√¢metro numeroPedido. Considere as condi√ß√µes a seguir:

Se numeroPedido for igual a 1, retorne a mensagem 'Pizza de Calabresa';
Se numeroPedido for igual a 2, retorne a mensagem 'Pizza de Quatro Queijos';
Se numeroPedido for igual a 3, retorne a mensagem 'Pizza de Frango com Catupiry';
Se numeroPedido for igual a 4, retorne a mensagem 'Pizza de Brigadeiro';
Se numeroPedido n√£o entrar nas condi√ß√µes acima, retorne a mensagem 'N√∫mero do pedido inv√°lido!'.
*/
function clientePedido(numeroPedido) {
    if (numeroPedido === 1) {
        return 'Pizza de calabresa';
    } else if (numeroPedido === 2) {
        return 'Pizza de Quatro Queijos';
    } else if (numeroPedido === 3) {
        return 'Pizza de Frango com Catupiry';
    } else if (numeroPedido === 4) {
        return 'Pizza de Brigadeiro';
    } else {
        return 'N√∫mero de pedido inv√°lido!';
    }
}
console.log(clientePedido(5));