//--------------------------------------------------Estrutura de Repeti√ß√£o---------------------------------------------------------------
/*
O que vamos aprender?
Utilizar a estrutura de repeti√ß√£o for para facilitar a execu√ß√£o de repeti√ß√µes condicionais nos seus c√≥digos.
Por que isso √© importante?
Em sua vida como pessoa desenvolvedora, voc√™ vai ter situa√ß√µes em que precisar√° realizar o mesmo passo v√°rias vezes. A estrutura de repeti√ß√£o for entra nesse momento para facilitar a sua vida! Voc√™ poder√° repetir o bloco de c√≥digo dentro do for utilizando estruturas condicionais, quantas vezes for necess√°rio, at√© que a condi√ß√£o passada seja atendida. Por exemplo:

Voc√™ precisa calcular a m√©dia de 30 pessoas estudantes e, com os recursos que voc√™ tem at√© agora, teria que fazer o c√°lculo de uma pessoa estudante por vez. Quanto trabalho, n√£o √© mesmo? D√° pregui√ßa s√≥ de pensar‚Ä¶ ü•±üò´
√â aqui que o for ‚ú® brilha ‚ú®! Com ele voc√™ poder√° criar uma condi√ß√£o para que ele rode 30 vezes e armazene as 30 m√©dias das pessoas estudantes em um array com poucas linhas de c√≥digo, evitando a repeti√ß√£o de c√≥digo e resultando em menos trabalho, afinal n√£o ser√° necess√°rio fazer 30 m√©dias de pessoas estudantes de forma manual.

*/

/*--------------------------------------------------Estrutura de repeti√ß√£o for------------------------------------------------------------------------------
Em algum momento voc√™ pode precisar repetir um mesmo passo v√°rias vezes. Por exemplo, no ano novo existe a tradi√ß√£o de fazer uma contagem regressiva na espera da virada. Para fazer uma contagem regressiva em c√≥digo, com as ferramentas que voc√™ tem at√© agora, o c√≥digo ficaria mais ou menos assim:
console.log(10);
console.log(9);
console.log(8);
console.log(7);
console.log(6);
console.log(5);
console.log(4);
console.log(3);
console.log(2);
console.log(1);
console.log('UHULLLLLLLLLLLLLLLLLLLL FELIZ ANO NOVOOOOOOOO üçæüéÜüéÜ‚ú®');

Bom, a estrutura desse c√≥digo ficou meio repetitivo, n√©? Voc√™ est√° realizando o mesmo passo v√°rias vezes, ou seja, dando um console.log em um e depois no outro, at√© que esse valor seja reduzido a uma unidade, no caso do exemplo, at√© o valor chegar a 1.

O for serve para solucionar esse problema! Ele √© um la√ßo de repeti√ß√£o (tamb√©m chamado de loop) que vai realizar diversas vezes o conjunto de instru√ß√µes que estiver dentro dele, at√© que uma condi√ß√£o especificada seja atendida. Seu formato √© o seguinte:

for (express√£o inicial; condi√ß√£o a ser cumprida; atualiza√ß√£o da express√£o inicial) {
    // c√≥digo que ser√° repetido
}

Hora de testar üíª : Voc√™ pode decompor o problema da contagem regressiva em partes menores para montar o for:

A contagem come√ßa em 10, logo a express√£o inicial come√ßar√° com o valor 10;
Voc√™ quer que o for pare quando? Quando a nossa contagem chegar a 1, logo, a condi√ß√£o a ser cumprida ser√° quando express√£o inicial for igual a 1.
A contagem √© regressiva, logo, voc√™ vai diminuir uma unidade da express√£o inicial a cada itera√ß√£o, ou seja, a cada repeti√ß√£o.
Anota a√≠ üì£ : Para nos referirmos a la√ßos de repeti√ß√£o (loops), podemos utilizar a palavra ‚Äòitera√ß√£o‚Äô, que significa ‚Äòrepeti√ß√£o‚Äô.

Agora que o problema foi decomposto, voc√™ vai aplic√°-lo em c√≥digo, seguindo o passo a passo:

Declare uma vari√°vel com valor 10 utilizando let, porque esse valor ser√° mudado durante o loop:
Relembrando üß† : Se voc√™ declarar a vari√°vel utilizando const, ela n√£o poder√° ser alterada e o seu for n√£o vai funcionar da forma esperada.

for (let index = 10; condi√ß√£o a ser cumprida; atualiza√ß√£o da express√£o inicial) {
    // c√≥digo que ser√° repetido
}

De olho na dica üëÄ : Voc√™ pode nomear essa vari√°vel do jeito que preferir, por√©m √© uma boa pr√°tica cham√°-la de index (√≠ndice), j√° que a itera√ß√£o acontece pelo index do array.

Vamos para o pr√≥ximo passo!

A contagem regressiva de ano novo come√ßa em 10 e vai at√© 1, ent√£o voc√™ precisa que o for rode enquanto o index for maior ou igual a 1. Quando chegar ao final da contagem, vamos estourar o champagne üçæ, ou seja, voc√™ vai parar o for. Logo, nossa condi√ß√£o a ser cumprida √© index >= 1. Isso quer dizer que, quando o index atender a essa condi√ß√£o, o for ser√° parado:

for (let index = 10; index >= 1; atualiza√ß√£o da express√£o inicial) {
  // c√≥digo que ser√° repetido
}

Agora, vamos √† √∫ltima express√£o do for.

Como √© uma contagem regressiva, voc√™ vai decrementar uma unidade do index por vez (10‚Ä¶ 9‚Ä¶ 8‚Ä¶), logo, a atualiza√ß√£o da express√£o inicial ser√° index = index - 1:
Anota a√≠ üì£ : Voc√™ tamb√©m pode usar o operador de decremento --. Ele vai ter o mesmo efeito que index = index - 1. Ficaria da seguinte forma: --index. Mas tenha aten√ß√£o: esse operador tira apenas uma unidade do n√∫mero!

for (let index = 10; index >= 1; index = index - 1) {
  // c√≥digo que ser√° repetido
}

O for est√° montado! S√≥ falta colocar o c√≥digo que voc√™ deseja repetir. Nesse caso, voc√™ vai fazer um console.log do index:

for (let index = 10; index >= 1; index = index - 1) {
  console.log(index);
}

Mas agora que voc√™ terminou a contagem, temos que estourar o champagne n√©, sen√£o n√£o √© ano novo:
*/
for (let index = 10; index >= 1; index = index - 1){
    console.log(index);
}
console.log('UHULLLLLLLLLLLLLLLLLLLL FELIZ ANO NOVOOOOOOOO üçæüéÜüéÜ‚ú®');

/*
O for funciona da seguinte forma:

Primeiro passo: Inicia o loop, declarando a vari√°vel index com o valor 10;

Segundo passo: A condi√ß√£o a ser verificada √© se o index √© maior ou igual a 1;

Terceiro passo: Se a condi√ß√£o verificada for verdadeira, ou seja, o valor de index ser maior ou igual a 1, ent√£o o console.log(index) √© executado;

Quarto passo: Ap√≥s a execu√ß√£o do console.log, o valor do index √© decrementado; Ap√≥s o decremento do index, √© verificada a condi√ß√£o a ser cumprida novamente, ou seja, se o index √© maior ou igual a 1.

Quinto passo: Quando a condi√ß√£o a ser cumprida for falsa, nesse caso quando o index for menor que 1, ent√£o o loop √© finalizado e o restante do c√≥digo √© executado.

Voc√™ conseguiu fazer o seu primeiro for!!
*/

/*
Bora aplicar esse novo conceito em uma situa√ß√£o mais recorrente? ü§î

Imagine que hoje voc√™ vai ao mercado e decidiu fazer uma lista de compras para n√£o esquecer do que precisa comprar.

ma√ß√£
gengibre
miojo
biscoito/bolacha
banana
feij√£o carioquinha
pasta de dente
Voc√™ organizou sua lista para que as frutas sejam pegas logo que chegar ao mercado, afinal quer escolher as mais fresquinhas üçáüçâüçå

Pegue 1 item da lista;
Verifique se √© uma fruta; caso seja, adicione ao seu carrinho;
V√° para o pr√≥ximo item da lista;
Verifique se √© uma fruta; caso seja, adicione ao seu carrinho;
V√° para o pr√≥ximo item da lista;
Verifique se √© uma fruta; caso seja, adicione ao seu carrinho;
V√° para o pr√≥ximo item da lista;
Verifique se √© uma fruta; caso seja, adicione ao seu carrinho.
*/
const listaMercado = [
    'Ma√ß√£', 
    'Gengibre', 
    'Miojo', 
    'Biscoito/Bolacha', 
    'Banana', 
    'Feij√£o Carioquinha', 
    'Pasta de Dente',
];
const carrinho = [];

     for (let posicaoNaLista = 0; posicaoNaLista < listaMercado.length; posicaoNaLista = posicaoNaLista + 1) {
        if (listaMercado[posicaoNaLista] === 'Ma√ß√£' || listaMercado[posicaoNaLista] === 'Banana') {
            carrinho.push(listaMercado[posicaoNaLista]);
        }
     }

     console.log(carrinho);

/*
Anota a√≠ üì£ : √â poss√≠vel usar o operador de incremento ++ em substitui√ß√£o √† estrutura posicaoNaLista = posicaoNaLista + 1, ficando da seguinte forma: ++ posicaoNaLista. Mas esse operador adiciona somente uma unidade ao n√∫mero.

Voc√™ est√° quase completando esse for! Agora s√≥ falta colocar o c√≥digo dentro dele!! ü•≥

Precisamos verificar se o item √© uma fruta e, se for, adicionamos no carrinho. Dessa forma, vamos precisar usar uma estrutura condicional. Ao pegarmos o item pelo √≠ndice usando listaDeCompras[posicaoNaLista], perguntamos ‚Äú√© uma fruta da nossa lista?‚Äù. Se for, colocamos no nosso carrinho; se n√£o for, n√£o fazemos nada.

Relembrando üß† : Para adicionar um item em um array, podemos usar o .push(). üòâ
*/