//------------------------------------------------Fun√ß√µes--------------------------------------------------

/*
O que vamos aprender?
Agora voc√™ vai aprender como melhorar o seu c√≥digo fazendo o uso de fun√ß√µes no JavaScript!

Voc√™ ser√° capaz de:
Extrair partes do seu c√≥digo e agrupar em fun√ß√µes;
Executar fun√ß√µes;
Escrever programas JavaScript utilizando fun√ß√µes.
Por que isso √© importante?
As fun√ß√µes s√£o ferramentas essenciais na caixa de ferramentas de uma pessoa programadora! Elas permitem reutilizar trechos de c√≥digo que se repetem em um programa, proporcionando mais agilidade no desenvolvimento do c√≥digo, al√©m de deixar o c√≥digo mais organizado.

O que s√£o fun√ß√µes?
Fun√ß√µes, na programa√ß√£o, s√£o blocos de c√≥digos que executam uma a√ß√£o necess√°ria em v√°rios momentos diferentes, e podem receber e retornar informa√ß√µes.

Por exemplo, para muitas pessoas a tarefa de lavar lou√ßa √© di√°ria. Para realiz√°-la, temos uma sequ√™ncia de passos que inclui: esfregar os pratos, os copos, os talheres, as panelas, etc.

Suponha que voc√™ precisa repetir esse passo a passo todos os dias e, √†s vezes, mais de uma vez por dia. √â cansativo, n√©? Se voc√™ tem uma lavadora de lou√ßas, √© s√≥ colocar tudo dentro dela, esperar o ciclo de lavagem terminar e, no final, ela te entrega todas as lou√ßas limpas! Muito melhor, n√£o √© mesmo?

As fun√ß√µes s√£o como a lavadora de lou√ßas! Em vez de repetir muitas vezes o mesmo c√≥digo, utilizamos as fun√ß√µes sempre que √© necess√°rio executar a mesma tarefa novamente. Essa √© a praticidade que as fun√ß√µes te proporcionam na programa√ß√£o!

Assim, se voc√™ tiver um c√≥digo repetido, pode colocar esse c√≥digo dentro de uma fun√ß√£o e, toda vez que precisar utilizar esse c√≥digo, em vez de digit√°-lo novamente, pode executar a fun√ß√£o.

Anota a√≠ üì£ : As fun√ß√µes podem receber e retornar informa√ß√µes. Elas tamb√©m possibilitam a reutiliza√ß√£o do c√≥digo, mantendo-o limpo e organizado, j√° que podem ser executadas quantas vezes for necess√°rio.

A defini√ß√£o da fun√ß√£o (tamb√©m chamada de declara√ß√£o da fun√ß√£o) consiste no uso da palavra-chave function, seguida pelo nome da fun√ß√£o e par√™nteses (). A a√ß√£o estar√° nos blocos de c√≥digo que definem o corpo da fun√ß√£o, entre chaves {}. Veja como isso ocorre na pr√°tica:

function nomeDaFuncao() {
  // bloco de c√≥digo a ser executado
}

A palavra function, que significa fun√ß√£o em portugu√™s, inicia a declara√ß√£o da fun√ß√£o;
O nome da fun√ß√£o √© o meio de identific√°-la e, ao cham√°-la, o JavaScript entende qual bloco de c√≥digo voc√™ quer executar;
Os par√™nteses servem para que a fun√ß√£o possa receber informa√ß√µes chamadas de par√¢metro e possibilitam que a fun√ß√£o utilize essas informa√ß√µes no bloco de c√≥digo.
Por exemplo, se voc√™ fosse desenvolver uma fun√ß√£o que tivesse o objetivo de cumprimentar a pessoa que est√° executando o programa pelo nome, tal como ‚ÄòOl√°, Gisele!‚Äô, como voc√™ faria?
*/

/*
Para isso, vamos quebrar a fun√ß√£o em partes:

Primeiro passo: iniciar com a palavra function; Segundo passo: dar um nome para a fun√ß√£o, como, por exemplo, imprimeSaudacao; Terceiro passo: abrir e fechar par√™nteses (), que ser√£o vazios no in√≠cio, pois ainda n√£o √© necess√°rio passar nenhuma informa√ß√£o para a fun√ß√£o; Quarto passo: abrir chaves {, definir o bloco de c√≥digo e fechar chaves }.

O objetivo da nossa fun√ß√£o √© cumprimentar uma pessoa. Para isso, podemos escrever uma sauda√ß√£o como 'Ol√°, Gisele!':

*/

function cumprimentar() {
   return 'Ol√° Andrei';
};
cumprimentar();